console.log("–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const modal = document.getElementById('imageModal');
const modalImg = document.getElementById('modalImage');
const closeBtn = document.getElementById('modalClose');
const gallery = document.querySelector('.gallery');
const spinner = document.getElementById('submitSpinner');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞–ª–µ—Ä–µ–∏
gallery.addEventListener('click', (e) => {
  if (e.target.tagName === 'IMG') {
    modal.style.display = 'block';
    modalImg.src = e.target.src;
    document.body.style.overflow = 'hidden';
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    currentImageIndex = Array.from(galleryImages).indexOf(e.target);
  }
});

closeBtn.addEventListener('click', () => {
  modal.style.display = 'none';
  document.body.style.overflow = '';
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
modal.addEventListener('click', (e) => {
  if (e.target === modal) {
    modal.style.display = 'none';
    document.body.style.overflow = '';
  }
});

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π
const sections = document.querySelectorAll('section');
sections.forEach(section => section.classList.add('fade-in'));

const observerOptions = {
  threshold: 0.2,
  rootMargin: '0px'
};

const sectionObserver = new IntersectionObserver((entries, observer) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      entry.target.classList.add('visible');
      observer.unobserve(entry.target);
    }
  });
}, observerOptions);

sections.forEach(section => sectionObserver.observe(section));

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–∞–ª–µ—Ä–µ–µ
let currentImageIndex = 0;
const galleryImages = document.querySelectorAll('.gallery img');

function showNextImage() {
  currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
  modalImg.src = galleryImages[currentImageIndex].src;
}

function showPrevImage() {
  currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
  modalImg.src = galleryImages[currentImageIndex].src;
}

document.addEventListener('keydown', (e) => {
  if (modal.style.display === 'block') {
    if (e.key === 'ArrowRight') showNextImage();
    if (e.key === 'ArrowLeft') showPrevImage();
    if (e.key === 'Escape') {
      modal.style.display = 'none';
      document.body.style.overflow = '';
    }
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const prevButton = document.getElementById('prevImage');
const nextButton = document.getElementById('nextImage');

prevButton.addEventListener('click', showPrevImage);
nextButton.addEventListener('click', showNextImage);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
const form = document.getElementById('contactForm');
const checkbox = document.getElementById('consentCheckbox');
const submitBtn = document.getElementById('submitBtn');
const formMessage = document.getElementById('formMessage');
const nameInput = form.querySelector('input[name="name"]');
const phoneInput = form.querySelector('input[name="phone"]');

function validateForm() {
  const isNameValid = nameInput.value.trim() !== '';
  const isPhoneValid = phoneInput.value.trim() !== '';
  const isCheckboxChecked = checkbox.checked;
  
  submitBtn.disabled = !(isNameValid && isPhoneValid && isCheckboxChecked);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
[nameInput, phoneInput, checkbox].forEach(element => {
  element.addEventListener('input', validateForm);
  element.addEventListener('change', validateForm);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
validateForm();

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phoneInput.addEventListener('input', (e) => {
  let value = e.target.value.replace(/\D/g, '');
  if (value.length > 0) {
    value = '+7' + value.substring(1);
    value = value.replace(/(\d{1})(\d{3})(\d{3})(\d{2})(\d{2})/, '$1 ($2) $3-$4-$5');
  }
  e.target.value = value;
});

form.addEventListener('submit', async function (e) {
  e.preventDefault();
  
  const name = this.querySelector('input[name="name"]').value;
  const phone = this.querySelector('input[name="phone"]').value;

  submitBtn.disabled = true;
  spinner.style.display = 'inline-block';
  formMessage.textContent = '';

  const text = `üì∏ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
  const TOKEN = '7667420836:AAETXgwHqVNz32upAx-4iOHhLJ-C4NSEYPU';
  const CHAT_ID = '199899972';
  const URL = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

  try {
    const response = await fetch(URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: text,
      }),
    });

    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ HTTP: " + response.status);
    
    formMessage.textContent = '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
    formMessage.style.color = 'green';
    this.reset();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
    formMessage.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    formMessage.style.color = 'red';
  } finally {
    submitBtn.disabled = false;
    spinner.style.display = 'none';
    checkbox.checked = false;
  }
});
